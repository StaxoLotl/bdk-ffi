namespace bdk {};

// ------------------------------------------------------------------------
// bdk crate - error module
// ------------------------------------------------------------------------

[Error]
interface AddressParseError {
  Base58();
  Bech32();
  WitnessVersion(string error_message);
  WitnessProgram(string error_message);
  UnknownHrp();
  LegacyAddressTooLong();
  InvalidBase58PayloadLength();
  InvalidLegacyPrefix();
  NetworkValidation();
  OtherAddressParseErr();
};

[Error]
interface Bip32Error {
    CannotDeriveFromHardenedKey();
    Secp256k1(string error_message);
    InvalidChildNumber(u32 child_number);
    InvalidChildNumberFormat();
    InvalidDerivationPathFormat();
    UnknownVersion(string version);
    WrongExtendedKeyLength(u32 length);
    Base58(string error_message);
    Hex(string error_message);
    InvalidPublicKeyHexLength(u32 length);
    UnknownError(string error_message);
};



[Error]
interface DescriptorError {
    InvalidHdKeyPath();
    InvalidDescriptorChecksum();
    HardenedDerivationXpub();
    MultiPath();
    Key(string error_message);
    Policy(string error_message);
    InvalidDescriptorCharacter(string char);
    Bip32(string error_message);
    Base58(string error_message);
    Pk(string error_message);
    Miniscript(string error_message);
    Hex(string error_message);
    ExternalAndInternalAreTheSame();
};


[Error]
interface ElectrumError {
  IOError(string error_message);
  Json(string error_message);
  Hex(string error_message);
  Protocol(string error_message);
  Bitcoin(string error_message);
  AlreadySubscribed();
  NotSubscribed();
  InvalidResponse(string error_message);
  Message(string error_message);
  InvalidDNSNameError(string domain);
  MissingDomain();
  AllAttemptsErrored();
  SharedIOError(string error_message);
  CouldntLockReader();
  Mpsc();
  CouldNotCreateConnection(string error_message);
  RequestAlreadyConsumed();
};

[Error]
interface EsploraError {
  Minreq(string error_message);
  HttpResponse(u16 status, string error_message);
  Parsing(string error_message);
  StatusCode(string error_message);
  BitcoinEncoding(string error_message);
  HexToArray(string error_message);
  HexToBytes(string error_message);
  TransactionNotFound();
  HeaderHeightNotFound(u32 height);
  HeaderHashNotFound();
  InvalidHttpHeaderName(string name);
  InvalidHttpHeaderValue(string value);
  RequestAlreadyConsumed();
  InvalidResponse();
};



[Error]
interface MiniscriptError {
    AbsoluteLockTime();
    AddrError(string error_message);
    AddrP2shError(string error_message);
    AnalysisError(string error_message);
    AtOutsideOr();
    BadDescriptor(string error_message);
    BareDescriptorAddr();
    CmsTooManyKeys(u32 keys);
    ContextError(string error_message);
    CouldNotSatisfy();
    ExpectedChar(string char);
    ImpossibleSatisfaction();
    InvalidOpcode();
    InvalidPush();
    LiftError(string error_message);
    MaxRecursiveDepthExceeded();
    MissingSig();
    MultiATooManyKeys(u64 keys);
    MultiColon();
    MultipathDescLenMismatch();
    NonMinimalVerify(string error_message);
    NonStandardBareScript();
    NonTopLevel(string error_message);
    ParseThreshold();
    PolicyError(string error_message);
    PubKeyCtxError();
    RelativeLockTime();
    Script(string error_message);
    Secp(string error_message);
    Threshold();
    TrNoScriptCode();
    Trailing(string error_message);
    TypeCheck(string error_message);
    Unexpected(string error_message);
    UnexpectedStart();
    UnknownWrapper(string char);
    Unprintable(u8 byte);
};





[Error]
interface PsbtFinalizeError {
  InputError(string reason, u32 index);
  WrongInputCount(u32 in_tx, u32 in_map);
  InputIdxOutofBounds(u32 psbt_inp, u32 requested);
};

[Error]
interface TransactionError {
  Io();
  OversizedVectorAllocation();
  InvalidChecksum(string expected, string actual);
  NonMinimalVarInt();
  ParseFailed();
  UnsupportedSegwitFlag(u8 flag);
  OtherTransactionErr();
};

// ------------------------------------------------------------------------
// bdk_wallet crate - types module
// ------------------------------------------------------------------------




// ------------------------------------------------------------------------
// bdk_wallet crate - wallet module
// ------------------------------------------------------------------------

typedef interface Policy;

typedef enum SatisfiableItem;


typedef enum Satisfaction;

typedef record Condition;

// ------------------------------------------------------------------------
// bdk_wallet crate - bitcoin re-exports
// ------------------------------------------------------------------------


[NonExhaustive, Remote]
enum Network {
  "Bitcoin",
  "Testnet",
  "Signet",
  "Regtest",
  "Testnet4",
};
